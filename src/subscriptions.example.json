[
	{
		/*
			Name of this subscription for organization purposes.
			This must be unique within this list of subscriptions
			but can otherwise be anything you want.
		*/
		"name":	"My Favorite Show",

		// URL of the subscription (video, playlist, channel).
		"url":	"https://www.youtube.com/...",



		// Configuration for logging facilities.
		"logging":
		{
			/*
				Path to Chrysalis' log file for this series. Will include
				stdout for youtube-dl.
				Leave blank to disable logging.
			*/
			"path":		"/path/to/my/media/files/My Favorite Show/chrysalis.log",
	
			/*
				'true' to append each run to the existing log file.
				'false' to overwrite the log file on each run.
				
				Default is 'false' to avoid excessively large files.
				If you use append mode, you may want to schedule a utility
				such as logrotate to lifecycle the logs for you.
			*/
			"append":	false
		},



		// Configuration for youtube-dl.
		"youtube-dl config":
		{
			/*
				Path to youtube-dl's archive file of videos already 
				downloaded for this subscription.
				Leave blank to disable the archive (You should have something
				in 'extra commands' to avoid redownloading videos in this case).
			*/
			"archive":			"/path/to/my/media/files/My Favorite Show/youtube-dl_archive.log",

			// youtube-dl metadata-from-title pattern.
			"metadata format":	"(?P<title>.+)",
	
			// youtube-dl output pattern.
			"output format":	"%(title)s/%(title)s.%(ext)s",
	
			// Path to youtube-dl config file.
			// Leave blank to not use a config file.
			"config":			"youtube/playlist.config",
	
			// Extra commands to pass into youtube-dl on top
			// of what's passed in by the config file.
			"extra commands":	"--max-filesize 1G"
		},



		/*
			Configuration for Chrysalis to rename youtube-dl's output.
			If you're happy with youtube-dl's output, you can remove this block.
		*/
		"post-processing": 
		{
			// Absolute path to where processed files of this series should be placed.
			"output directory":	"/path/to/my/media/files/My Favorite Show",

			// ID of the series within the DB above.
			"series id":		0,

			// List of repositories to use for token
			// replacement in renaming.
			"repositories":
			[
				"tvdb",
				"os",
				"chrysalis"
			],

			/*
				Create the regex pattern to run against youtube-dl's outputted video
				that creates a single named capture which exactly matches the field 
				name of the episode name used by the API desired.
			*/
			"pattern":			"^.+/(?P<episodeName>.+)\\.[^\\.\\S]+$",

			/*
				Create the string format patterns to rename each outputted file to.
				Each placeholder should be: {value_type.value[:string_format]}
				The allowed value_types are:
					series: Info from the API for the series.
					episode: Info from the API for the episode.
					file: Path info from the pre-renamed file.
					special: Info generated by Chrysalis.
			*/
			"season folder":	"{special.season}",
			"episode folder":	"{series.seriesName} - S{episode.airedSeason:02d}E{episode.airedEpisodeNumber:03d} - {episode.episodeName}",
			"video":			"{series.seriesName} - S{episode.airedSeason:02d}E{episode.airedEpisodeNumber:03d} - {episode.episodeName}.{file.ext}",
			"subtitle":			"{series.seriesName} - S{episode.airedSeason:02d}E{episode.airedEpisodeNumber:03d} - {episode.episodeName}.{file.all_ext}",
			"thumbnail":		"{series.seriesName} - S{episode.airedSeason:02d}E{episode.airedEpisodeNumber:03d} - {episode.episodeName}.{file.ext}",
			"description":		"description.txt"
		}
	}
]